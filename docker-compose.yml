version: '3.8'

services:
  # MongoDB Database
  mongo:
    image: mongo:7.0
    container_name: ugc_saas_mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: ugc_saas
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - ugc_network

  # Redis for Celery
  redis:
    image: redis:7.2-alpine
    container_name: ugc_saas_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ugc_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ugc_saas_backend
    restart: unless-stopped
    environment:
      - MONGODB_URL=mongodb://admin:password123@mongo:27017/ugc_saas?authSource=admin
      - DATABASE_NAME=ugc_saas
      - SECRET_KEY=your-super-secret-key-change-in-production
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=7
      - INSTAGRAM_APP_ID=${INSTAGRAM_APP_ID}
      - INSTAGRAM_APP_SECRET=${INSTAGRAM_APP_SECRET}
      - INSTAGRAM_REDIRECT_URI=${INSTAGRAM_REDIRECT_URI}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "8000:8000"
    depends_on:
      - mongo
      - redis
    volumes:
      - ./backend:/app
      - reports_data:/app/reports
    networks:
      - ugc_network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ugc_saas_frontend
    restart: unless-stopped
    environment:
      - VITE_API_URL=http://localhost:8000
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - ugc_network

  # Celery Worker
  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    container_name: ugc_saas_worker
    restart: unless-stopped
    environment:
      - MONGODB_URL=mongodb://admin:password123@mongo:27017/ugc_saas?authSource=admin
      - DATABASE_NAME=ugc_saas
      - REDIS_URL=redis://redis:6379/0
      - INSTAGRAM_APP_ID=${INSTAGRAM_APP_ID}
      - INSTAGRAM_APP_SECRET=${INSTAGRAM_APP_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - FROM_EMAIL=${FROM_EMAIL}
      - REPORTS_DIR=/app/reports
    depends_on:
      - mongo
      - redis
      - backend
    volumes:
      - ./worker:/app
      - reports_data:/app/reports
    command: celery -A app.celery_app worker --loglevel=info --concurrency=2
    networks:
      - ugc_network

  # Celery Beat (Scheduler)
  beat:
    build:
      context: ./worker
      dockerfile: Dockerfile
    container_name: ugc_saas_beat
    restart: unless-stopped
    environment:
      - MONGODB_URL=mongodb://admin:password123@mongo:27017/ugc_saas?authSource=admin
      - DATABASE_NAME=ugc_saas
      - REDIS_URL=redis://redis:6379/0
      - INSTAGRAM_APP_ID=${INSTAGRAM_APP_ID}
      - INSTAGRAM_APP_SECRET=${INSTAGRAM_APP_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - FROM_EMAIL=${FROM_EMAIL}
      - REPORTS_DIR=/app/reports
    depends_on:
      - mongo
      - redis
      - worker
    volumes:
      - ./worker:/app
      - reports_data:/app/reports
    command: celery -A app.celery_app beat --loglevel=info
    networks:
      - ugc_network

  # Celery Flower (Monitoring)
  flower:
    build:
      context: ./worker
      dockerfile: Dockerfile
    container_name: ugc_saas_flower
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - worker
    command: celery -A app.celery_app flower --port=5555
    networks:
      - ugc_network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: ugc_saas_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - ugc_network

volumes:
  mongo_data:
    driver: local
  redis_data:
    driver: local
  reports_data:
    driver: local

networks:
  ugc_network:
    driver: bridge

