version: "3.9"

services:
  # MongoDB Database
  mongo:
    image: mongo:7.0
    container_name: ugc_saas_mongo
    restart: "no"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: ugc_saas
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - ugc_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Celery
  redis:
    image: redis:7.2-alpine
    container_name: ugc_saas_redis
    restart: "no"
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ugc_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ugc_saas_backend
    restart: "no"
    environment:
      MONGODB_URL: mongodb://admin:password123@mongo:27017/ugc_saas?authSource=admin
      DATABASE_NAME: ugc_saas
      SECRET_KEY: your-super-secret-key-change-in-production
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      REFRESH_TOKEN_EXPIRE_DAYS: 7
      REDIS_URL: redis://redis:6379/0
      INSTAGRAM_APP_ID: ${INSTAGRAM_APP_ID}
      INSTAGRAM_APP_SECRET: ${INSTAGRAM_APP_SECRET}
      INSTAGRAM_REDIRECT_URI: ${INSTAGRAM_REDIRECT_URI}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    ports:
      - "8001:8000"  # Porta alterada
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - reports_data:/app/reports
    networks:
      - ugc_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ugc_saas_frontend
    restart: "no"
    environment:
      VITE_API_URL: http://localhost:8001  # Aponta para a nova porta
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - ugc_network

  # Celery Worker
  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    container_name: ugc_saas_worker
    restart: "no"
    environment:
      MONGODB_URL: mongodb://admin:password123@mongo:27017/ugc_saas?authSource=admin
      DATABASE_NAME: ugc_saas
      REDIS_URL: redis://redis:6379/0
      INSTAGRAM_APP_ID: ${INSTAGRAM_APP_ID}
      INSTAGRAM_APP_SECRET: ${INSTAGRAM_APP_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      FROM_EMAIL: ${FROM_EMAIL}
      REPORTS_DIR: /app/reports
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    volumes:
      - ./worker:/app
      - reports_data:/app/reports
    command: celery -A app.celery_app worker --loglevel=info --concurrency=2
    networks:
      - ugc_network

  # Celery Beat (Scheduler)
  beat:
    build:
      context: ./worker
      dockerfile: Dockerfile
    container_name: ugc_saas_beat
    restart: "no"
    environment:
      MONGODB_URL: mongodb://admin:password123@mongo:27017/ugc_saas?authSource=admin
      DATABASE_NAME: ugc_saas
      REDIS_URL: redis://redis:6379/0
      INSTAGRAM_APP_ID: ${INSTAGRAM_APP_ID}
      INSTAGRAM_APP_SECRET: ${INSTAGRAM_APP_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      FROM_EMAIL: ${FROM_EMAIL}
      REPORTS_DIR: /app/reports
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      worker:
        condition: service_started
    volumes:
      - ./worker:/app
      - reports_data:/app/reports
    command: celery -A app.celery_app beat --loglevel=info
    networks:
      - ugc_network

  # Celery Flower (Monitoring)
  flower:
    build:
      context: ./worker
      dockerfile: Dockerfile
    container_name: ugc_saas_flower
    restart: "no"
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
      worker:
        condition: service_started
    command: celery -A app.celery_app flower --port=5555 --broker=redis://redis:6379/0
    networks:
      - ugc_network

volumes:
  mongo_data:
    driver: local
  redis_data:
    driver: local
  reports_data:
    driver: local

networks:
  ugc_network:
    driver: bridge
